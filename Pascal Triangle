Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30


Code :-


def func(n):
    dp=[]
    for i in range(n):
        dp.append([])
    for  i in range(n):
        for j in range(i+1):
            if(j==0 or j==i):
                dp[i].append(1)
            else:
                dp[i].append(dp[i-1][j-1]+dp[i-1][j])
            #print(l)
    return dp
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        return func(numRows)




119. Pascal's Triangle II
Easy
4K
305
Companies
Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]
 

Constraints:

0 <= rowIndex <= 33


code :-

def func(n):
    dp=[]
    for i in range(n):
        dp.append([])
    for  i in range(n):
        for j in range(i+1):
            if(j==0 or j==i):
                dp[i].append(1)
            else:
                dp[i].append(dp[i-1][j-1]+dp[i-1][j])
            #print(l)
    return dp[n-1]
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        return func(rowIndex+1)
